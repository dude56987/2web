#! /bin/bash

if echo "$@" | grep -q -e "--test-output";then
	source 2webLib.sh

	themes="dice flower flower2 flower3 flower4 flower5 flower6 flowers flowerRand flowerRand2 wood quilt suit card solid double stitch diamond smallDotted dotted boxes note hollowBlock bowtie block bottomBlock fadeDown fadeUp book castle floppy computer computers term lines sine grass vines altdice weather sid chem papersRand papersRand2 cross cross2 crossAlt graph"

	LINE_THEME="$(randomLineTheme)"
	drawLine
	drawSmallHeader "Checking themes"
	drawLine
	for themeName in $themes;do
		LINE_THEME="$themeName"
		drawLine
	done
	#
	LINE_THEME="$(randomLineTheme)"
	drawLine
	drawSmallHeader "Single Line Alerts"
	drawLine
	for index in $(seq 20);do
		ALERT "$index $RANDOM$RANDOM$RANDOM$RANDOM" "$index $RANDOM"
	done
	#
	LINE_THEME="$(randomLineTheme)"
	drawLine
	drawSmallHeader "Multi Line Alerts"
	drawLine
	for index in $(seq 20);do
		LINE_THEME="$(randomLineTheme)"
		ALERT "$index ${RANDOM}\n${RANDOM}\n${RANDOM}\n" "$index $RANDOM"
	done
	#
	LINE_THEME="$(randomLineTheme)"
	drawLine
	ALERT "START RANDOM INFO"
	drawLine
	#
	for index in $(seq 20);do
		INFO "$index $RANDOM"
		sleep 0.1
	done
	#
	ALERT "STOP RANDOM INFO"
	drawLine
	# draw the line themes
	for themeName in $themes;do
		LINE_THEME="$themeName"
		randomColorText
		drawLine
		drawSmallHeader "$LINE_THEME"
		drawLine
	done
	#
	LINE_THEME="$(randomLineTheme)"
	drawLine
	drawSmallHeader "Testing Spinner"
	drawLine
	rotateSpinner &
	SPINNER_PID="$!"
	sleep 10
	kill "$SPINNER_PID"
	# exit after the test is complete
	exit
fi
if test -f /etc/os-release;then
	if grep -q "ubuntu" /etc/os-release;then
		keepBuilding="true"
	elif grep -q "raspbian" /etc/os-release;then
		keepBuilding="true"
	elif grep -q "debian" /etc/os-release;then
		keepBuilding="true"
	elif grep -q "dietpi" /etc/os-release;then
		keepBuilding="true"
	else
		keepBuilding="false"
	fi
else
	keepBuilding="false"
fi
# check the info
if echo "$@" | grep -q -e "--info";then
	# write dependency report
	# for each found dependency package in debdata/control list the package information
	packages=$(grep "Depends:" debdata/control | sed "s/Depends://g" | tr -d ',')
	packageData=""
	totalPackages=$(echo "$packages" | wc -w)
	packageCounter=0
	for package in $packages;do
		printf "\r $packageCounter/$totalPackages        "
		#echo "================================================================================"
		#echo "$package"
		packageInfo=$(aptitude show $package)
		#echo "$packageInfo"
		packageData="$'$packageData\n$packageInfo'"
		packageCounter=$(( packageCounter + 1 ))
	done
	echo
	#echo "$packageData"

	echo "Checking dependencies locations..."
	echo "Mainline Packages: $(echo "$packageData" | grep "Section:" | grep -v "multiverse" | grep -v "universe" | grep -v "restricted" | wc -l)"
	echo "The below packages are community maintained. These are less good to have as dependencies but are all open source."
	echo "Universe Packages: $(echo "$packageData" | grep "Section:" | grep -c "universe")"
	echo "The below should contain 0 packages in both types. These are non open source softwares and incompatible with the project."
	echo "Multiverse Packages: $(echo "$packageData" | grep "Section:" | grep -c "multiverse")"
	echo "Restricted Packages: $(echo "$packageData" | grep "Section:" | grep -c "restricted")"
	# exit after info check
	exit
fi
# check if the force flag is set to force building on a unsupported operating system
if echo "$@" | grep -q -e "--force";then
	keepBuilding="true"
fi
# create the build enviorment
if [ "$keepBuilding" == "true" ];then
	# install tools for building the manual pages for the package
	apt-get install pandoc
	apt-get install w3m
	# install the zip utilities for building the package in the most compressed format
	apt-get install xz-utils
	# install make if not installed
	apt-get install make
	# install npm to get javascript packages
	apt-get install npm
	# add git to get the version number
	apt-get install git
	# install gdebi to install the debian package
	apt-get install gdebi
	# install iso gen for generating iso file containing package
	apt-get install genisoimage
else
	echo "Only Debian, Ubuntu, Raspbian, and Dietpi builds are currently supported!"
	echo "You can force configure to run if you add --force"
fi

